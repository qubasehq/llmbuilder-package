[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "llmbuilder"
dynamic = ["version"]
description = "A comprehensive toolkit for building, training, and deploying language models"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Qubase Team", email = "team@qubase.in"}
]
maintainers = [
    {name = "Qubase Team", email = "team@qubase.in"}
]
keywords = [
    "machine learning",
    "deep learning",
    "natural language processing",
    "transformers",
    "language models",
    "training",
    "inference",
    "tokenization",
    "data processing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "numpy>=1.21.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "colorama>=0.4.6",
    "requests>=2.28.0",
    "packaging>=21.0",
]

[project.optional-dependencies]
# PDF processing with OCR
pdf = [
    "pymupdf>=1.23.0",
    "pytesseract>=0.3.10",
    "pillow>=9.0.0",
]

# EPUB processing
epub = [
    "ebooklib>=0.18",
]

# HTML processing
html = [
    "beautifulsoup4>=4.11.0",
    "lxml>=4.9.0",
    "html5lib>=1.1",
]

# Office documents (PowerPoint)
office = [
    "python-pptx>=0.6.21",
]

# Semantic deduplication
semantic = [
    "sentence-transformers>=2.2.0",
    "scikit-learn>=1.1.0",
    "faiss-cpu>=1.7.0",
]

# Tokenizer training
tokenizer = [
    "sentencepiece>=0.1.99",
    "tokenizers>=0.13.0",
]

# GGUF model conversion
conversion = [
    "gguf>=0.1.0",
]

# All optional features
all = [
    "llmbuilder[pdf,epub,html,semantic,conversion,tokenizer,office]",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.10.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "pydocstyle>=6.3.0",
    "coverage>=7.0.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
    "mkdocs-include-markdown-plugin>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/Qubasehq/llmbuilder-package"
Documentation = "https://qubasehq.github.io/llmbuilder-package/"
Repository = "https://github.com/Qubasehq/llmbuilder-package.git"
Issues = "https://github.com/Qubasehq/llmbuilder-package/issues"
Changelog = "https://github.com/Qubasehq/llmbuilder-package/blob/main/CHANGELOG.md"

[project.scripts]
llmbuilder = "llmbuilder.cli:main"

[tool.setuptools]

[tool.setuptools.packages.find]
where = ["."]
include = ["llmbuilder", "llmbuilder.*"]

[tool.setuptools.dynamic]
version = {attr = "llmbuilder.__version__"}

[tool.setuptools.package-data]
llmbuilder = [
    "config/templates/*.json",
    "data/sample_data/*",
    "py.typed",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["llmbuilder"]
known_third_party = [
    "torch",
    "numpy",
    "click",
    "yaml",
    "tqdm",
    "requests",
    "pytest",
    "setuptools",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sentence_transformers.*",
    "sklearn.*",
    "faiss.*",
    "pymupdf.*",
    "pytesseract.*",
    "ebooklib.*",
    "bs4.*",
    "lxml.*",
    "html5lib.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=llmbuilder",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "gpu: marks tests that require GPU",
    "optional_deps: marks tests that require optional dependencies",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["llmbuilder"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]
match_dir = "^(?!tests).*"
